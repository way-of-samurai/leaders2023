Приложение состоит из трех основных модулей: proxy, ml, app

Proxy
Технический модуль, который стартует на узле, имеющем публичный IP-адрес. В случае команды ЛЦТ2023 Путь самурая использовался публичный хост лаборатории HPC НИЯУ МИФИ, сотрудниками которой являются участники конкурса. Узел Proxy входит в общую VPN-сеть с Compute-хостом в качестве которого использовался сервер на базе отечественного процессора Байкал (8 ARM cores, 16 GB RAM). Proxy-узел перенаправляет запросы на Compute-узел, на котором запущены приложение (App) и процесс перерасчета рекомендаций (ml)

ML
Расчетный модуль рекомендательной системы, использующей в качестве основы метод матричной факторизации. Представляет собой контейнеризированный (Dockerfile) python-код (main.py) на базе технологии масштабируемых распределенных вычислений pySpark.
Spark запускается в локальном режиме, но с вслучае необходимости может быть легко масштабирован. Перерасчет предполагается выполнять каждые сутки, однако сам он занимает всего лишь десятки минут. 
Код получает данные из БД Postgis (PostgreSQL с установленным плагином для работы с ГЕО-данными).
Считываются данные (загруженные предварительно в БД данные из attend.csv) о посещениях пользователей (все, накопительным итогом, так как данных мало), данные по категориям (предварительно прогруженные из файла dict.xslx в иерархическую таблицу Categories), данные по группам (загруженные предварительно в БД данные из groups.csv).

Все данные собираются в один большой dataframe attendanceWithLevelIds, где есть информация о пользователе, группе, принадлежности группы к направлению 3 (lvl3), принадлежности группы к разметке для тела, ума, души (lvl0), а также колонка rank - в которой каждлое посещение оценено в 1 балл.

Далее attendanceWithLevelIds группируется сначала по lvl0, потом по lvl3. Для каждой группировки запускается обучение модели ASL.

Далее для каждого пользователя рекомендуется по 3 lvl0 категории и 200 lvl3 категорий и сохраняются в таблицу БД Recommendations

App
Приложение обеспечивает интерфейс работы пользователя с системой. Запускается в docker-compose на Compute-узле. Приложение контейнеризировано (Docker), написано на фреймворке NextJS, в качестве фреймворка для взаимодействия с БД используется Prisma (также отвечает за миграции схем БД в случае изменений).

Основная логика рекомендательной выдачи находится в файле /app/api/search/route.js. Представляет собой sql-запрос. POST - точка входа. Берем userId координаты пользователя. Далее собираем ответ. importantGroupIds - получение групп, размеченных администратором (при помощи колонки important) - для принудительной рекомендации активностей. Далее в выдачу они идут первыми и в порядке important. 

recommendedGroupIds - основной алгоритм рекомендаций. Беруться категории lvl0 (для тела, ума, души) и получается распределение рекомендаций в  итоговой выдаче по трем катешориям. Например 6-3-3, если пользователь ранее интересовался физическими активностями. Потом заполняются данные покаждой категории. Выбираются все категории lvl3, соответсвующие очередной lvl-категории, выбираются все группы, отсекаются те, что соответствуют выбранной категории lvl3, отфильтровываются по расписанию (Timetable) те занятия, что еще не закончились, добавляются столбец rank, показывающий наиболее полезные рекомендации для пользователя, исключаются те группы, которые уже посещаются пользователем, добавляются столбцы-категории по расстоянию между пользователем и активностью и временем до старта занятий. Выполняется сортировка по времени начала, расстоянию и полезности (rank). Если функция recommendedGroupIds не дала нужного количества рекомендаций с учпетом фильтров пользователя мы дополняем выдачу через getOtherGroups, которая не ориентируется на рекомендательный вес (rank) выданный движком рекомендаций. 

 /app/prisma/seed* содержат скрипты для начальной заливки данных в БД. При заливке данных о координатах станций метро использовалась информация с портала https://data.mos.ru/opendata/7704786030-vhody-i-vyhody-vestibyuley-stantsiy-moskovskogo-metropolitena Для парсинга кординат групп и пользователей из адресов был поднят локальный сервис на основе открытых данных OpenStreetMap - nominatim (/app/docker-compose.yaml). 



test.csv - сформирован посредством выполнения реальных запросов к приложению (код формирования файла test.py и сам файл файл расположены в /ml)

Вход в развернутую систему https://leaders.hpclab.ru/ осущетвляется через:
для существующего пользователя - через ввод userId в поля ФИО и даты рождения (из файла users.csv). Пример: 101403186 101403186 101403186 1953-04-24
для нового пользователя - ввод произвольных данных. Пример: Иванов Иван Иванович 1950-05-05
