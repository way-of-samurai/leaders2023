// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Gender {
  MALE
  FEMALE
}

enum LocationType {
  DISTRICT
  AREA
  METRO
}

enum GroupType {
  ONLINE
  OFFLINE
}

enum PeriodType {
  ACTIVE
  CLOSED
  PLANNED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WENDSDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Location {
  id        Int                                  @id @default(autoincrement())
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @default(now()) @updatedAt
  type      LocationType
  name      String
  point     Unsupported("geometry(Point, 4326)")
  groups    Group[]

  @@index([point], name: "location_point_idx", type: Gist)
}

model User {
  id             Int                                   @id @default(autoincrement())
  createdAt      DateTime                              @default(now())
  updatedAt      DateTime                              @default(now()) @updatedAt
  externalId     Int?
  firstName      String
  lastName       String
  middleName     String
  gender         Gender?
  birthdate      DateTime                              @db.Date
  address        String?
  address_point  Unsupported("geometry(Point, 4326)")?
  quizPassed     Boolean                               @default(false)
  answers        QuestionAnswer[]
  attends        Attend[]
  recommendations Recommendation[]

  @@unique([firstName, lastName, middleName, birthdate])
  @@index(externalId)
  @@index([address_point], name: "user_address_point_idx", type: Gist)
}

model Category {
  id             Int                  @id @default(autoincrement())
  externalId     Int                  @unique
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  level          Int                  @db.SmallInt
  name           String
  description    String?
  parentId       Int?
  parent         Category?            @relation("CategorySubcategories", fields: [parentId], references: [id])
  subcategories  Category[]           @relation("CategorySubcategories")
  groups         CategoriesOnGroups[]
  recommendations Recommendation[]

  @@unique([level, name])
}

model Group {
  id            Int                                  @id @default(autoincrement())
  createdAt     DateTime                             @default(now())
  updatedAt     DateTime                             @default(now()) @updatedAt
  externalId    Int                                  @unique
  type          GroupType
  categories    CategoriesOnGroups[]
  address       String
  district      String?
  area          Location?                            @relation(fields: [areaId], references: [id])
  areaId        Int?
  address_point Unsupported("geometry(Point, 4326)")
  important     Boolean                              @default(false)
  timetable     Timetable[]
  attends       Attend[]

  @@index([address_point], name: "group_address_point_idx", type: Gist)
}

model Timetable {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  groupId   Int
  group     Group      @relation(fields: [groupId], references: [id])
  type      PeriodType
  dateStart DateTime   @db.Date
  dateEnd   DateTime   @db.Date
  dow       DayOfWeek
  timeStart DateTime   @db.Time(0)
  timeEnd   DateTime   @db.Time(0)

  @@unique([groupId, type, dateStart, dateEnd, dow, timeStart, timeEnd])
}

model CategoriesOnGroups {
  createdAt  DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([groupId, categoryId])
}

model Question {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  index       Int              @unique
  title       String
  description String?
  options     QuestionOption[]
  answers     QuestionAnswer[]
}

model QuestionOption {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  index      Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  name       String

  @@unique([questionId, index])
}

model QuestionAnswer {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  result     Boolean[]

  @@unique([questionId, userId])
}

model Attend {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  externalActivityId Int
  externalGroupId    Int
  externalUserId     Int
  group              Group     @relation(fields: [groupId], references: [id])
  groupId            Int
  user               User      @relation(fields: [userId], references: [id])
  userId             Int
  type               GroupType
  date               DateTime  @db.Date
  timeStart          DateTime  @db.Time(0)
  timeEnd            DateTime  @db.Time(0)

  @@index(externalActivityId)
  @@index(externalGroupId)
  @@index(externalUserId)
  @@index([externalGroupId, externalUserId])
  @@index([groupId, userId])
}

model Recommendation {
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  rank       Float

  @@id([userId, categoryId])
}
